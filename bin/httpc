#!/usr/bin/env node

/**
 * httpc - An interactive HTTP Client
 * @version 0.1.0
 * @author Jason Woodland
 */

// Configuration
const useVi = true;
const defaultURI = 'http://localhost/';

// Dependencies
const chalk = require('chalk');
const keypress = require('keypress');
const readline = require('readline');
const rlv = require('readline-vim');
const jsome = require('jsome');
const parse = require('shell-quote').parse;
const request = require('syncrequest');
const url = require('url');


jsome.colors = {
	num: 'cyan',
	str: 'green',
	bool: 'cyan',
	regex: 'cyan',
	undef: 'grey',
	null: 'grey',
	attr: 'blue',
	quot: 'green',
	punc: 'white',
	brack: 'white'
};

// Create the readline interface
const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});

// Use Vi if enabled
if(useVi) rlv(rl);

var version = '0.1.0';
var method = 'GET';
var methods = [
	'GET',
	'PUT',
	'POST',
	'PATCH',
	'DELETE',
	'HEAD'
];

var uri = defaultURI;
var jar = request.jar();

setPrompt();
rl.prompt();

rl.on('line', (input) => {
	rl.pause();

	var args = parse(input);
	var headerOnly = false;
	var bodyOnly = false;
	var body = '';
	var contentType = 'application/json';
	var requestMethod;
	var requestURI = uri;

	// Check if the first argument is a request method
	if(args[0]) {
		if(methods.indexOf(args[0].toUpperCase()) != -1) {
			requestMethod = args[0].toUpperCase();
			args = args.slice(1);
		}
	}

	// Determine there is a URI or options to handle
	if(args[0]) {

		// Handle options
		var index = 0; // index of the value, not the name

		args.forEach(function(arg) {
			index++;
			switch(arg) {
				case '--data':
				case '-d':
					body = args[index];
					break;
				case '--body':
				case '-b':
					bodyOnly = true;
					break;
				case '--header':
				case '-h':
					headerOnly = true;
					break;
				case '--content-type':
				case '-t':
					contentType = args[index];
			}
		});

		// Set the URI if the first parameter (after request methods) is not an option
		if(args[0][0] != '-') {
			requestURI = url.resolve(uri, args[0]);
			if(!requestMethod) uri = requestURI;
		}
	}

	// Execute a request
	if(requestMethod) {

		// Sync request
		response = request.sync({
			method: requestMethod,
			uri: requestURI,
			jar: jar,
			headers: {
				'Content-Type': contentType,
				'Cookie': jar.getCookieString(uri)
			},
			body: body
		});

		if(!response.error) {

			// Store cookies in the jar
			if(response.response.headers['set-cookie'])
			response.response.headers['set-cookie'].forEach(function(cookie) {
				jar.setCookie(request.cookie(cookie), uri);
			});

			// Output response headers
			var headers = response.response.headers;
			var longest = Object.keys(headers).sort(function (a, b) { return b.length - a.length; })[0].length;

			if(!bodyOnly || headerOnly) {

				// Output status line
				var success = String(response.response.statusCode)[0] == '2';

				console.log(
					chalk.blue('HTTP') + chalk.white('/') + chalk.blue(response.response.httpVersion) + ' ' +
					(success ? chalk.green : chalk.red)(
						response.response.statusCode + ' ' +
						response.response.statusMessage
					)
				);

				for(var field in headers) {
					var words = field.split('-');
					var newWords = [];

					// Capitalize field names
					words.forEach(function(word) {
						newWords.push(word[0].toUpperCase() + word.substr(1));
					});

					prettyName = newWords.join('-');

					console.log(
						chalk.blue(prettyName) +
						chalk.white(': ') +
						' '.repeat(longest - prettyName.length) + // Align values
						chalk.yellow(headers[field])
					);
				}

				console.log(); // Newline after headers
			}

			// Output response body
			if((bodyOnly || !headerOnly) && response.body) {

				// Format as JSON if the response Content-Type is application/jason
				var body = response.body.replace(/^\s+|\s+$/g, '');

				if(headers['content-type'].split(';')[0] == 'application/json') {
					formatJSON(body);
				} else {
					console.log(body);
				}

				console.log(); // Newline after body
			}
		}
	}

	setPrompt();
	rl.prompt()
});

function setPrompt() {
	rl.setPrompt(
		chalk.white(uri) + ' '
	);

	rl.prompt();
}

function formatJSON(input) {
	jsome.parse(input);
}

